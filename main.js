/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all3) => {
  for (var name in all3)
    __defProp(target, name, { get: all3[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SyncSnowflake2,
  gitlab: () => gitlab,
  local_changes_logs: () => local_changes_logs,
  pocket: () => pocket,
  req_queue: () => req_queue,
  sync_logs: () => sync_logs
});
module.exports = __toCommonJS(main_exports);
var import_obsidian7 = require("obsidian");

// src/gitlab_api.ts
var import_obsidian = require("obsidian");

// node_modules/axios/lib/helpers/bind.js
function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}

// node_modules/axios/lib/utils.js
var { toString } = Object.prototype;
var { getPrototypeOf } = Object;
var kindOf = ((cache) => (thing) => {
  const str = toString.call(thing);
  return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(/* @__PURE__ */ Object.create(null));
var kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type;
};
var typeOfTest = (type) => (thing) => typeof thing === type;
var { isArray } = Array;
var isUndefined = typeOfTest("undefined");
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}
var isArrayBuffer = kindOfTest("ArrayBuffer");
function isArrayBufferView(val) {
  let result;
  if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}
var isString = typeOfTest("string");
var isFunction = typeOfTest("function");
var isNumber = typeOfTest("number");
var isObject = (thing) => thing !== null && typeof thing === "object";
var isBoolean = (thing) => thing === true || thing === false;
var isPlainObject = (val) => {
  if (kindOf(val) !== "object") {
    return false;
  }
  const prototype3 = getPrototypeOf(val);
  return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
};
var isDate = kindOfTest("Date");
var isFile = kindOfTest("File");
var isBlob = kindOfTest("Blob");
var isFileList = kindOfTest("FileList");
var isStream = (val) => isObject(val) && isFunction(val.pipe);
var isFormData = (thing) => {
  let kind;
  return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
  kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
};
var isURLSearchParams = kindOfTest("URLSearchParams");
var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
function forEach(obj, fn, { allOwnKeys = false } = {}) {
  if (obj === null || typeof obj === "undefined") {
    return;
  }
  let i;
  let l;
  if (typeof obj !== "object") {
    obj = [obj];
  }
  if (isArray(obj)) {
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;
    for (i = 0; i < len; i++) {
      key = keys[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}
function findKey(obj, key) {
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i = keys.length;
  let _key;
  while (i-- > 0) {
    _key = keys[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}
var _global = (() => {
  if (typeof globalThis !== "undefined")
    return globalThis;
  return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
})();
var isContextDefined = (context) => !isUndefined(context) && context !== _global;
function merge() {
  const { caseless } = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  };
  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}
var extend = (a, b, thisArg, { allOwnKeys } = {}) => {
  forEach(b, (val, key) => {
    if (thisArg && isFunction(val)) {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  }, { allOwnKeys });
  return a;
};
var stripBOM = (content) => {
  if (content.charCodeAt(0) === 65279) {
    content = content.slice(1);
  }
  return content;
};
var inherits = (constructor, superConstructor, props, descriptors2) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, "super", {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
};
var toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
  let props;
  let i;
  let prop;
  const merged = {};
  destObj = destObj || {};
  if (sourceObj == null)
    return destObj;
  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
  return destObj;
};
var endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === void 0 || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
};
var toArray = (thing) => {
  if (!thing)
    return null;
  if (isArray(thing))
    return thing;
  let i = thing.length;
  if (!isNumber(i))
    return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
};
var isTypedArray = ((TypedArray) => {
  return (thing) => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
var forEachEntry = (obj, fn) => {
  const generator = obj && obj[Symbol.iterator];
  const iterator = generator.call(obj);
  let result;
  while ((result = iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
};
var matchAll = (regExp, str) => {
  let matches;
  const arr = [];
  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }
  return arr;
};
var isHTMLForm = kindOfTest("HTMLFormElement");
var toCamelCase = (str) => {
  return str.toLowerCase().replace(
    /[-_\s]([a-z\d])(\w*)/g,
    function replacer(m, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};
var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
var isRegExp = kindOfTest("RegExp");
var reduceDescriptors = (obj, reducer) => {
  const descriptors2 = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};
  forEach(descriptors2, (descriptor, name) => {
    let ret;
    if ((ret = reducer(descriptor, name, obj)) !== false) {
      reducedDescriptors[name] = ret || descriptor;
    }
  });
  Object.defineProperties(obj, reducedDescriptors);
};
var freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
      return false;
    }
    const value = obj[name];
    if (!isFunction(value))
      return;
    descriptor.enumerable = false;
    if ("writable" in descriptor) {
      descriptor.writable = false;
      return;
    }
    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error("Can not rewrite read-only method '" + name + "'");
      };
    }
  });
};
var toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};
  const define = (arr) => {
    arr.forEach((value) => {
      obj[value] = true;
    });
  };
  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
  return obj;
};
var noop = () => {
};
var toFiniteNumber = (value, defaultValue) => {
  value = +value;
  return Number.isFinite(value) ? value : defaultValue;
};
var ALPHA = "abcdefghijklmnopqrstuvwxyz";
var DIGIT = "0123456789";
var ALPHABET = {
  DIGIT,
  ALPHA,
  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
};
var generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
  let str = "";
  const { length } = alphabet;
  while (size--) {
    str += alphabet[Math.random() * length | 0];
  }
  return str;
};
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
}
var toJSONObject = (obj) => {
  const stack = new Array(10);
  const visit = (source, i) => {
    if (isObject(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }
      if (!("toJSON" in source)) {
        stack[i] = source;
        const target = isArray(source) ? [] : {};
        forEach(source, (value, key) => {
          const reducedValue = visit(value, i + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });
        stack[i] = void 0;
        return target;
      }
    }
    return source;
  };
  return visit(obj, 0);
};
var isAsyncFn = kindOfTest("AsyncFunction");
var isThenable = (thing) => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
var utils_default = {
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isBoolean,
  isObject,
  isPlainObject,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty,
  // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  ALPHABET,
  generateString,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable
};

// node_modules/axios/lib/core/AxiosError.js
function AxiosError(message, code, config, request, response) {
  Error.call(this);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack;
  }
  this.message = message;
  this.name = "AxiosError";
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  response && (this.response = response);
}
utils_default.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: utils_default.toJSONObject(this.config),
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  }
});
var prototype = AxiosError.prototype;
var descriptors = {};
[
  "ERR_BAD_OPTION_VALUE",
  "ERR_BAD_OPTION",
  "ECONNABORTED",
  "ETIMEDOUT",
  "ERR_NETWORK",
  "ERR_FR_TOO_MANY_REDIRECTS",
  "ERR_DEPRECATED",
  "ERR_BAD_RESPONSE",
  "ERR_BAD_REQUEST",
  "ERR_CANCELED",
  "ERR_NOT_SUPPORT",
  "ERR_INVALID_URL"
  // eslint-disable-next-line func-names
].forEach((code) => {
  descriptors[code] = { value: code };
});
Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, "isAxiosError", { value: true });
AxiosError.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(prototype);
  utils_default.toFlatObject(error, axiosError, function filter2(obj) {
    return obj !== Error.prototype;
  }, (prop) => {
    return prop !== "isAxiosError";
  });
  AxiosError.call(axiosError, error.message, code, config, request, response);
  axiosError.cause = error;
  axiosError.name = error.name;
  customProps && Object.assign(axiosError, customProps);
  return axiosError;
};
var AxiosError_default = AxiosError;

// node_modules/axios/lib/helpers/null.js
var null_default = null;

// node_modules/axios/lib/helpers/toFormData.js
function isVisitable(thing) {
  return utils_default.isPlainObject(thing) || utils_default.isArray(thing);
}
function removeBrackets(key) {
  return utils_default.endsWith(key, "[]") ? key.slice(0, -2) : key;
}
function renderKey(path2, key, dots) {
  if (!path2)
    return key;
  return path2.concat(key).map(function each(token, i) {
    token = removeBrackets(token);
    return !dots && i ? "[" + token + "]" : token;
  }).join(dots ? "." : "");
}
function isFlatArray(arr) {
  return utils_default.isArray(arr) && !arr.some(isVisitable);
}
var predicates = utils_default.toFlatObject(utils_default, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});
function toFormData(obj, formData, options) {
  if (!utils_default.isObject(obj)) {
    throw new TypeError("target must be an object");
  }
  formData = formData || new (null_default || FormData)();
  options = utils_default.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    return !utils_default.isUndefined(source[option]);
  });
  const metaTokens = options.metaTokens;
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
  const useBlob = _Blob && utils_default.isSpecCompliantForm(formData);
  if (!utils_default.isFunction(visitor)) {
    throw new TypeError("visitor must be a function");
  }
  function convertValue(value) {
    if (value === null)
      return "";
    if (utils_default.isDate(value)) {
      return value.toISOString();
    }
    if (!useBlob && utils_default.isBlob(value)) {
      throw new AxiosError_default("Blob is not supported. Use a Buffer instead.");
    }
    if (utils_default.isArrayBuffer(value) || utils_default.isTypedArray(value)) {
      return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
    }
    return value;
  }
  function defaultVisitor(value, key, path2) {
    let arr = value;
    if (value && !path2 && typeof value === "object") {
      if (utils_default.endsWith(key, "{}")) {
        key = metaTokens ? key : key.slice(0, -2);
        value = JSON.stringify(value);
      } else if (utils_default.isArray(value) && isFlatArray(value) || (utils_default.isFileList(value) || utils_default.endsWith(key, "[]")) && (arr = utils_default.toArray(value))) {
        key = removeBrackets(key);
        arr.forEach(function each(el, index) {
          !(utils_default.isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
            convertValue(el)
          );
        });
        return false;
      }
    }
    if (isVisitable(value)) {
      return true;
    }
    formData.append(renderKey(path2, key, dots), convertValue(value));
    return false;
  }
  const stack = [];
  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });
  function build(value, path2) {
    if (utils_default.isUndefined(value))
      return;
    if (stack.indexOf(value) !== -1) {
      throw Error("Circular reference detected in " + path2.join("."));
    }
    stack.push(value);
    utils_default.forEach(value, function each(el, key) {
      const result = !(utils_default.isUndefined(el) || el === null) && visitor.call(
        formData,
        el,
        utils_default.isString(key) ? key.trim() : key,
        path2,
        exposedHelpers
      );
      if (result === true) {
        build(el, path2 ? path2.concat(key) : [key]);
      }
    });
    stack.pop();
  }
  if (!utils_default.isObject(obj)) {
    throw new TypeError("data must be an object");
  }
  build(obj);
  return formData;
}
var toFormData_default = toFormData;

// node_modules/axios/lib/helpers/AxiosURLSearchParams.js
function encode(str) {
  const charMap = {
    "!": "%21",
    "'": "%27",
    "(": "%28",
    ")": "%29",
    "~": "%7E",
    "%20": "+",
    "%00": "\0"
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}
function AxiosURLSearchParams(params, options) {
  this._pairs = [];
  params && toFormData_default(params, this, options);
}
var prototype2 = AxiosURLSearchParams.prototype;
prototype2.append = function append(name, value) {
  this._pairs.push([name, value]);
};
prototype2.toString = function toString2(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, encode);
  } : encode;
  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + "=" + _encode(pair[1]);
  }, "").join("&");
};
var AxiosURLSearchParams_default = AxiosURLSearchParams;

// node_modules/axios/lib/helpers/buildURL.js
function encode2(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
function buildURL(url, params, options) {
  if (!params) {
    return url;
  }
  const _encode = options && options.encode || encode2;
  const serializeFn = options && options.serialize;
  let serializedParams;
  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode);
  }
  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
  }
  return url;
}

// node_modules/axios/lib/core/InterceptorManager.js
var InterceptorManager = class {
  constructor() {
    this.handlers = [];
  }
  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }
  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }
  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }
  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    utils_default.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  }
};
var InterceptorManager_default = InterceptorManager;

// node_modules/axios/lib/defaults/transitional.js
var transitional_default = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};

// node_modules/axios/lib/platform/browser/classes/URLSearchParams.js
var URLSearchParams_default = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams_default;

// node_modules/axios/lib/platform/browser/classes/FormData.js
var FormData_default = typeof FormData !== "undefined" ? FormData : null;

// node_modules/axios/lib/platform/browser/classes/Blob.js
var Blob_default = typeof Blob !== "undefined" ? Blob : null;

// node_modules/axios/lib/platform/browser/index.js
var browser_default = {
  isBrowser: true,
  classes: {
    URLSearchParams: URLSearchParams_default,
    FormData: FormData_default,
    Blob: Blob_default
  },
  protocols: ["http", "https", "file", "blob", "url", "data"]
};

// node_modules/axios/lib/platform/common/utils.js
var utils_exports = {};
__export(utils_exports, {
  hasBrowserEnv: () => hasBrowserEnv,
  hasStandardBrowserEnv: () => hasStandardBrowserEnv,
  hasStandardBrowserWebWorkerEnv: () => hasStandardBrowserWebWorkerEnv
});
var hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
var hasStandardBrowserEnv = ((product) => {
  return hasBrowserEnv && ["ReactNative", "NativeScript", "NS"].indexOf(product) < 0;
})(typeof navigator !== "undefined" && navigator.product);
var hasStandardBrowserWebWorkerEnv = (() => {
  return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
  self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
})();

// node_modules/axios/lib/platform/index.js
var platform_default = {
  ...utils_exports,
  ...browser_default
};

// node_modules/axios/lib/helpers/toURLEncodedForm.js
function toURLEncodedForm(data, options) {
  return toFormData_default(data, new platform_default.classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path2, helpers) {
      if (platform_default.isNode && utils_default.isBuffer(value)) {
        this.append(key, value.toString("base64"));
        return false;
      }
      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}

// node_modules/axios/lib/helpers/formDataToJSON.js
function parsePropPath(name) {
  return utils_default.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
    return match[0] === "[]" ? "" : match[1] || match[0];
  });
}
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i;
  const len = keys.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}
function formDataToJSON(formData) {
  function buildPath(path2, value, target, index) {
    let name = path2[index++];
    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path2.length;
    name = !name && utils_default.isArray(target) ? target.length : name;
    if (isLast) {
      if (utils_default.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }
      return !isNumericKey;
    }
    if (!target[name] || !utils_default.isObject(target[name])) {
      target[name] = [];
    }
    const result = buildPath(path2, value, target[name], index);
    if (result && utils_default.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }
    return !isNumericKey;
  }
  if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {
    const obj = {};
    utils_default.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });
    return obj;
  }
  return null;
}
var formDataToJSON_default = formDataToJSON;

// node_modules/axios/lib/defaults/index.js
function stringifySafely(rawValue, parser, encoder) {
  if (utils_default.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils_default.trim(rawValue);
    } catch (e) {
      if (e.name !== "SyntaxError") {
        throw e;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
var defaults = {
  transitional: transitional_default,
  adapter: ["xhr", "http"],
  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || "";
    const hasJSONContentType = contentType.indexOf("application/json") > -1;
    const isObjectPayload = utils_default.isObject(data);
    if (isObjectPayload && utils_default.isHTMLForm(data)) {
      data = new FormData(data);
    }
    const isFormData2 = utils_default.isFormData(data);
    if (isFormData2) {
      if (!hasJSONContentType) {
        return data;
      }
      return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data)) : data;
    }
    if (utils_default.isArrayBuffer(data) || utils_default.isBuffer(data) || utils_default.isStream(data) || utils_default.isFile(data) || utils_default.isBlob(data)) {
      return data;
    }
    if (utils_default.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils_default.isURLSearchParams(data)) {
      headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
      return data.toString();
    }
    let isFileList2;
    if (isObjectPayload) {
      if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
        return toURLEncodedForm(data, this.formSerializer).toString();
      }
      if ((isFileList2 = utils_default.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
        const _FormData = this.env && this.env.FormData;
        return toFormData_default(
          isFileList2 ? { "files[]": data } : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }
    if (isObjectPayload || hasJSONContentType) {
      headers.setContentType("application/json", false);
      return stringifySafely(data);
    }
    return data;
  }],
  transformResponse: [function transformResponse(data) {
    const transitional2 = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
    const JSONRequested = this.responseType === "json";
    if (data && utils_default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
      const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === "SyntaxError") {
            throw AxiosError_default.from(e, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }
    return data;
  }],
  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: platform_default.classes.FormData,
    Blob: platform_default.classes.Blob
  },
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      "Accept": "application/json, text/plain, */*",
      "Content-Type": void 0
    }
  }
};
utils_default.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
  defaults.headers[method] = {};
});
var defaults_default = defaults;

// node_modules/axios/lib/helpers/parseHeaders.js
var ignoreDuplicateOf = utils_default.toObjectSet([
  "age",
  "authorization",
  "content-length",
  "content-type",
  "etag",
  "expires",
  "from",
  "host",
  "if-modified-since",
  "if-unmodified-since",
  "last-modified",
  "location",
  "max-forwards",
  "proxy-authorization",
  "referer",
  "retry-after",
  "user-agent"
]);
var parseHeaders_default = (rawHeaders) => {
  const parsed = {};
  let key;
  let val;
  let i;
  rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
    i = line.indexOf(":");
    key = line.substring(0, i).trim().toLowerCase();
    val = line.substring(i + 1).trim();
    if (!key || parsed[key] && ignoreDuplicateOf[key]) {
      return;
    }
    if (key === "set-cookie") {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
    }
  });
  return parsed;
};

// node_modules/axios/lib/core/AxiosHeaders.js
var $internals = Symbol("internals");
function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }
  return utils_default.isArray(value) ? value.map(normalizeValue) : String(value);
}
function parseTokens(str) {
  const tokens = /* @__PURE__ */ Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;
  while (match = tokensRE.exec(str)) {
    tokens[match[1]] = match[2];
  }
  return tokens;
}
var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
function matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {
  if (utils_default.isFunction(filter2)) {
    return filter2.call(this, value, header);
  }
  if (isHeaderNameFilter) {
    value = header;
  }
  if (!utils_default.isString(value))
    return;
  if (utils_default.isString(filter2)) {
    return value.indexOf(filter2) !== -1;
  }
  if (utils_default.isRegExp(filter2)) {
    return filter2.test(value);
  }
}
function formatHeader(header) {
  return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
    return char.toUpperCase() + str;
  });
}
function buildAccessors(obj, header) {
  const accessorName = utils_default.toCamelCase(" " + header);
  ["get", "set", "has"].forEach((methodName) => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}
var AxiosHeaders = class {
  constructor(headers) {
    headers && this.set(headers);
  }
  set(header, valueOrRewrite, rewrite) {
    const self2 = this;
    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);
      if (!lHeader) {
        throw new Error("header name must be a non-empty string");
      }
      const key = utils_default.findKey(self2, lHeader);
      if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
        self2[key || _header] = normalizeValue(_value);
      }
    }
    const setHeaders = (headers, _rewrite) => utils_default.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
    if (utils_default.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite);
    } else if (utils_default.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders(parseHeaders_default(header), valueOrRewrite);
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }
    return this;
  }
  get(header, parser) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      if (key) {
        const value = this[key];
        if (!parser) {
          return value;
        }
        if (parser === true) {
          return parseTokens(value);
        }
        if (utils_default.isFunction(parser)) {
          return parser.call(this, value, key);
        }
        if (utils_default.isRegExp(parser)) {
          return parser.exec(value);
        }
        throw new TypeError("parser must be boolean|regexp|function");
      }
    }
  }
  has(header, matcher) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }
    return false;
  }
  delete(header, matcher) {
    const self2 = this;
    let deleted = false;
    function deleteHeader(_header) {
      _header = normalizeHeader(_header);
      if (_header) {
        const key = utils_default.findKey(self2, _header);
        if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
          delete self2[key];
          deleted = true;
        }
      }
    }
    if (utils_default.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }
    return deleted;
  }
  clear(matcher) {
    const keys = Object.keys(this);
    let i = keys.length;
    let deleted = false;
    while (i--) {
      const key = keys[i];
      if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }
    return deleted;
  }
  normalize(format) {
    const self2 = this;
    const headers = {};
    utils_default.forEach(this, (value, header) => {
      const key = utils_default.findKey(headers, header);
      if (key) {
        self2[key] = normalizeValue(value);
        delete self2[header];
        return;
      }
      const normalized = format ? formatHeader(header) : String(header).trim();
      if (normalized !== header) {
        delete self2[header];
      }
      self2[normalized] = normalizeValue(value);
      headers[normalized] = true;
    });
    return this;
  }
  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }
  toJSON(asStrings) {
    const obj = /* @__PURE__ */ Object.create(null);
    utils_default.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && utils_default.isArray(value) ? value.join(", ") : value);
    });
    return obj;
  }
  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }
  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
  }
  get [Symbol.toStringTag]() {
    return "AxiosHeaders";
  }
  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }
  static concat(first, ...targets) {
    const computed = new this(first);
    targets.forEach((target) => computed.set(target));
    return computed;
  }
  static accessor(header) {
    const internals = this[$internals] = this[$internals] = {
      accessors: {}
    };
    const accessors = internals.accessors;
    const prototype3 = this.prototype;
    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);
      if (!accessors[lHeader]) {
        buildAccessors(prototype3, _header);
        accessors[lHeader] = true;
      }
    }
    utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
    return this;
  }
};
AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
utils_default.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {
  let mapped = key[0].toUpperCase() + key.slice(1);
  return {
    get: () => value,
    set(headerValue) {
      this[mapped] = headerValue;
    }
  };
});
utils_default.freezeMethods(AxiosHeaders);
var AxiosHeaders_default = AxiosHeaders;

// node_modules/axios/lib/core/transformData.js
function transformData(fns, response) {
  const config = this || defaults_default;
  const context = response || config;
  const headers = AxiosHeaders_default.from(context.headers);
  let data = context.data;
  utils_default.forEach(fns, function transform(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
  });
  headers.normalize();
  return data;
}

// node_modules/axios/lib/cancel/isCancel.js
function isCancel(value) {
  return !!(value && value.__CANCEL__);
}

// node_modules/axios/lib/cancel/CanceledError.js
function CanceledError(message, config, request) {
  AxiosError_default.call(this, message == null ? "canceled" : message, AxiosError_default.ERR_CANCELED, config, request);
  this.name = "CanceledError";
}
utils_default.inherits(CanceledError, AxiosError_default, {
  __CANCEL__: true
});
var CanceledError_default = CanceledError;

// node_modules/axios/lib/core/settle.js
function settle(resolve, reject, response) {
  const validateStatus2 = response.config.validateStatus;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError_default(
      "Request failed with status code " + response.status,
      [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}

// node_modules/axios/lib/helpers/cookies.js
var cookies_default = platform_default.hasStandardBrowserEnv ? (
  // Standard browser envs support document.cookie
  {
    write(name, value, expires, path2, domain, secure) {
      const cookie = [name + "=" + encodeURIComponent(value)];
      utils_default.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
      utils_default.isString(path2) && cookie.push("path=" + path2);
      utils_default.isString(domain) && cookie.push("domain=" + domain);
      secure === true && cookie.push("secure");
      document.cookie = cookie.join("; ");
    },
    read(name) {
      const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove(name) {
      this.write(name, "", Date.now() - 864e5);
    }
  }
) : (
  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {
    },
    read() {
      return null;
    },
    remove() {
    }
  }
);

// node_modules/axios/lib/helpers/isAbsoluteURL.js
function isAbsoluteURL(url) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}

// node_modules/axios/lib/helpers/combineURLs.js
function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
}

// node_modules/axios/lib/core/buildFullPath.js
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}

// node_modules/axios/lib/helpers/isURLSameOrigin.js
var isURLSameOrigin_default = platform_default.hasStandardBrowserEnv ? (
  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
  function standardBrowserEnv() {
    const msie = /(msie|trident)/i.test(navigator.userAgent);
    const urlParsingNode = document.createElement("a");
    let originURL;
    function resolveURL(url) {
      let href = url;
      if (msie) {
        urlParsingNode.setAttribute("href", href);
        href = urlParsingNode.href;
      }
      urlParsingNode.setAttribute("href", href);
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
      };
    }
    originURL = resolveURL(window.location.href);
    return function isURLSameOrigin(requestURL) {
      const parsed = utils_default.isString(requestURL) ? resolveURL(requestURL) : requestURL;
      return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
    };
  }()
) : (
  // Non standard browser envs (web workers, react-native) lack needed support.
  function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  }()
);

// node_modules/axios/lib/helpers/parseProtocol.js
function parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || "";
}

// node_modules/axios/lib/helpers/speedometer.js
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;
  min = min !== void 0 ? min : 1e3;
  return function push(chunkLength) {
    const now = Date.now();
    const startedAt = timestamps[tail];
    if (!firstSampleTS) {
      firstSampleTS = now;
    }
    bytes[head] = chunkLength;
    timestamps[head] = now;
    let i = tail;
    let bytesCount = 0;
    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }
    head = (head + 1) % samplesCount;
    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }
    if (now - firstSampleTS < min) {
      return;
    }
    const passed = startedAt && now - startedAt;
    return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
  };
}
var speedometer_default = speedometer;

// node_modules/axios/lib/adapters/xhr.js
function progressEventReducer(listener, isDownloadStream) {
  let bytesNotified = 0;
  const _speedometer = speedometer_default(50, 250);
  return (e) => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : void 0;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;
    bytesNotified = loaded;
    const data = {
      loaded,
      total,
      progress: total ? loaded / total : void 0,
      bytes: progressBytes,
      rate: rate ? rate : void 0,
      estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
      event: e
    };
    data[isDownloadStream ? "download" : "upload"] = true;
    listener(data);
  };
}
var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
var xhr_default = isXHRAdapterSupported && function(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    let requestData = config.data;
    const requestHeaders = AxiosHeaders_default.from(config.headers).normalize();
    let { responseType, withXSRFToken } = config;
    let onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }
      if (config.signal) {
        config.signal.removeEventListener("abort", onCanceled);
      }
    }
    let contentType;
    if (utils_default.isFormData(requestData)) {
      if (platform_default.hasStandardBrowserEnv || platform_default.hasStandardBrowserWebWorkerEnv) {
        requestHeaders.setContentType(false);
      } else if ((contentType = requestHeaders.getContentType()) !== false) {
        const [type, ...tokens] = contentType ? contentType.split(";").map((token) => token.trim()).filter(Boolean) : [];
        requestHeaders.setContentType([type || "multipart/form-data", ...tokens].join("; "));
      }
    }
    let request = new XMLHttpRequest();
    if (config.auth) {
      const username = config.auth.username || "";
      const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
      requestHeaders.set("Authorization", "Basic " + btoa(username + ":" + password));
    }
    const fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
    request.timeout = config.timeout;
    function onloadend() {
      if (!request) {
        return;
      }
      const responseHeaders = AxiosHeaders_default.from(
        "getAllResponseHeaders" in request && request.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };
      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);
      request = null;
    }
    if ("onloadend" in request) {
      request.onloadend = onloadend;
    } else {
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
          return;
        }
        setTimeout(onloadend);
      };
    }
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }
      reject(new AxiosError_default("Request aborted", AxiosError_default.ECONNABORTED, config, request));
      request = null;
    };
    request.onerror = function handleError() {
      reject(new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request));
      request = null;
    };
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
      const transitional2 = config.transitional || transitional_default;
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(new AxiosError_default(
        timeoutErrorMessage,
        transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED,
        config,
        request
      ));
      request = null;
    };
    if (platform_default.hasStandardBrowserEnv) {
      withXSRFToken && utils_default.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(config));
      if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin_default(fullPath)) {
        const xsrfValue = config.xsrfHeaderName && config.xsrfCookieName && cookies_default.read(config.xsrfCookieName);
        if (xsrfValue) {
          requestHeaders.set(config.xsrfHeaderName, xsrfValue);
        }
      }
    }
    requestData === void 0 && requestHeaders.setContentType(null);
    if ("setRequestHeader" in request) {
      utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }
    if (!utils_default.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }
    if (responseType && responseType !== "json") {
      request.responseType = config.responseType;
    }
    if (typeof config.onDownloadProgress === "function") {
      request.addEventListener("progress", progressEventReducer(config.onDownloadProgress, true));
    }
    if (typeof config.onUploadProgress === "function" && request.upload) {
      request.upload.addEventListener("progress", progressEventReducer(config.onUploadProgress));
    }
    if (config.cancelToken || config.signal) {
      onCanceled = (cancel) => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new CanceledError_default(null, config, request) : cancel);
        request.abort();
        request = null;
      };
      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
      }
    }
    const protocol = parseProtocol(fullPath);
    if (protocol && platform_default.protocols.indexOf(protocol) === -1) {
      reject(new AxiosError_default("Unsupported protocol " + protocol + ":", AxiosError_default.ERR_BAD_REQUEST, config));
      return;
    }
    request.send(requestData || null);
  });
};

// node_modules/axios/lib/adapters/adapters.js
var knownAdapters = {
  http: null_default,
  xhr: xhr_default
};
utils_default.forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, "name", { value });
    } catch (e) {
    }
    Object.defineProperty(fn, "adapterName", { value });
  }
});
var renderReason = (reason) => `- ${reason}`;
var isResolvedHandle = (adapter) => utils_default.isFunction(adapter) || adapter === null || adapter === false;
var adapters_default = {
  getAdapter: (adapters) => {
    adapters = utils_default.isArray(adapters) ? adapters : [adapters];
    const { length } = adapters;
    let nameOrAdapter;
    let adapter;
    const rejectedReasons = {};
    for (let i = 0; i < length; i++) {
      nameOrAdapter = adapters[i];
      let id;
      adapter = nameOrAdapter;
      if (!isResolvedHandle(nameOrAdapter)) {
        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
        if (adapter === void 0) {
          throw new AxiosError_default(`Unknown adapter '${id}'`);
        }
      }
      if (adapter) {
        break;
      }
      rejectedReasons[id || "#" + i] = adapter;
    }
    if (!adapter) {
      const reasons = Object.entries(rejectedReasons).map(
        ([id, state]) => `adapter ${id} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
      );
      let s = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
      throw new AxiosError_default(
        `There is no suitable adapter to dispatch the request ` + s,
        "ERR_NOT_SUPPORT"
      );
    }
    return adapter;
  },
  adapters: knownAdapters
};

// node_modules/axios/lib/core/dispatchRequest.js
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
  if (config.signal && config.signal.aborted) {
    throw new CanceledError_default(null, config);
  }
}
function dispatchRequest(config) {
  throwIfCancellationRequested(config);
  config.headers = AxiosHeaders_default.from(config.headers);
  config.data = transformData.call(
    config,
    config.transformRequest
  );
  if (["post", "put", "patch"].indexOf(config.method) !== -1) {
    config.headers.setContentType("application/x-www-form-urlencoded", false);
  }
  const adapter = adapters_default.getAdapter(config.adapter || defaults_default.adapter);
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);
    response.data = transformData.call(
      config,
      config.transformResponse,
      response
    );
    response.headers = AxiosHeaders_default.from(response.headers);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = AxiosHeaders_default.from(reason.response.headers);
      }
    }
    return Promise.reject(reason);
  });
}

// node_modules/axios/lib/core/mergeConfig.js
var headersToObject = (thing) => thing instanceof AxiosHeaders_default ? thing.toJSON() : thing;
function mergeConfig(config1, config2) {
  config2 = config2 || {};
  const config = {};
  function getMergedValue(target, source, caseless) {
    if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {
      return utils_default.merge.call({ caseless }, target, source);
    } else if (utils_default.isPlainObject(source)) {
      return utils_default.merge({}, source);
    } else if (utils_default.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(a, b, caseless) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(a, b, caseless);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(void 0, a, caseless);
    }
  }
  function valueFromConfig2(a, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    }
  }
  function defaultToConfig2(a, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(void 0, a);
    }
  }
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(void 0, a);
    }
  }
  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    withXSRFToken: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
  };
  utils_default.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge2 = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge2(config1[prop], config2[prop], prop);
    utils_default.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
  });
  return config;
}

// node_modules/axios/lib/env/data.js
var VERSION = "1.6.2";

// node_modules/axios/lib/helpers/validator.js
var validators = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
  validators[type] = function validator(thing) {
    return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
  };
});
var deprecatedWarnings = {};
validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
  }
  return (value, opt, opts) => {
    if (validator === false) {
      throw new AxiosError_default(
        formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
        AxiosError_default.ERR_DEPRECATED
      );
    }
    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      console.warn(
        formatMessage(
          opt,
          " has been deprecated since v" + version + " and will be removed in the near future"
        )
      );
    }
    return validator ? validator(value, opt, opts) : true;
  };
};
function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== "object") {
    throw new AxiosError_default("options must be an object", AxiosError_default.ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i = keys.length;
  while (i-- > 0) {
    const opt = keys[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === void 0 || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError_default("option " + opt + " must be " + result, AxiosError_default.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError_default("Unknown option " + opt, AxiosError_default.ERR_BAD_OPTION);
    }
  }
}
var validator_default = {
  assertOptions,
  validators
};

// node_modules/axios/lib/core/Axios.js
var validators2 = validator_default.validators;
var Axios = class {
  constructor(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager_default(),
      response: new InterceptorManager_default()
    };
  }
  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  request(configOrUrl, config) {
    if (typeof configOrUrl === "string") {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }
    config = mergeConfig(this.defaults, config);
    const { transitional: transitional2, paramsSerializer, headers } = config;
    if (transitional2 !== void 0) {
      validator_default.assertOptions(transitional2, {
        silentJSONParsing: validators2.transitional(validators2.boolean),
        forcedJSONParsing: validators2.transitional(validators2.boolean),
        clarifyTimeoutError: validators2.transitional(validators2.boolean)
      }, false);
    }
    if (paramsSerializer != null) {
      if (utils_default.isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        };
      } else {
        validator_default.assertOptions(paramsSerializer, {
          encode: validators2.function,
          serialize: validators2.function
        }, true);
      }
    }
    config.method = (config.method || this.defaults.method || "get").toLowerCase();
    let contextHeaders = headers && utils_default.merge(
      headers.common,
      headers[config.method]
    );
    headers && utils_default.forEach(
      ["delete", "get", "head", "post", "put", "patch", "common"],
      (method) => {
        delete headers[method];
      }
    );
    config.headers = AxiosHeaders_default.concat(contextHeaders, headers);
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
        return;
      }
      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    let promise;
    let i = 0;
    let len;
    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest.bind(this), void 0];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;
      promise = Promise.resolve(config);
      while (i < len) {
        promise = promise.then(chain[i++], chain[i++]);
      }
      return promise;
    }
    len = requestInterceptorChain.length;
    let newConfig = config;
    i = 0;
    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }
    try {
      promise = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }
    i = 0;
    len = responseInterceptorChain.length;
    while (i < len) {
      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
    }
    return promise;
  }
  getUri(config) {
    config = mergeConfig(this.defaults, config);
    const fullPath = buildFullPath(config.baseURL, config.url);
    return buildURL(fullPath, config.params, config.paramsSerializer);
  }
};
utils_default.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});
utils_default.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(mergeConfig(config || {}, {
        method,
        headers: isForm ? {
          "Content-Type": "multipart/form-data"
        } : {},
        url,
        data
      }));
    };
  }
  Axios.prototype[method] = generateHTTPMethod();
  Axios.prototype[method + "Form"] = generateHTTPMethod(true);
});
var Axios_default = Axios;

// node_modules/axios/lib/cancel/CancelToken.js
var CancelToken = class {
  constructor(executor) {
    if (typeof executor !== "function") {
      throw new TypeError("executor must be a function.");
    }
    let resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });
    const token = this;
    this.promise.then((cancel) => {
      if (!token._listeners)
        return;
      let i = token._listeners.length;
      while (i-- > 0) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });
    this.promise.then = (onfulfilled) => {
      let _resolve;
      const promise = new Promise((resolve) => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);
      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };
      return promise;
    };
    executor(function cancel(message, config, request) {
      if (token.reason) {
        return;
      }
      token.reason = new CanceledError_default(message, config, request);
      resolvePromise(token.reason);
    });
  }
  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }
  /**
   * Subscribe to the cancel signal
   */
  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }
    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }
  /**
   * Unsubscribe from the cancel signal
   */
  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }
  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel;
    const token = new CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token,
      cancel
    };
  }
};
var CancelToken_default = CancelToken;

// node_modules/axios/lib/helpers/spread.js
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}

// node_modules/axios/lib/helpers/isAxiosError.js
function isAxiosError(payload) {
  return utils_default.isObject(payload) && payload.isAxiosError === true;
}

// node_modules/axios/lib/helpers/HttpStatusCode.js
var HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511
};
Object.entries(HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode[value] = key;
});
var HttpStatusCode_default = HttpStatusCode;

// node_modules/axios/lib/axios.js
function createInstance(defaultConfig) {
  const context = new Axios_default(defaultConfig);
  const instance = bind(Axios_default.prototype.request, context);
  utils_default.extend(instance, Axios_default.prototype, context, { allOwnKeys: true });
  utils_default.extend(instance, context, null, { allOwnKeys: true });
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };
  return instance;
}
var axios = createInstance(defaults_default);
axios.Axios = Axios_default;
axios.CanceledError = CanceledError_default;
axios.CancelToken = CancelToken_default;
axios.isCancel = isCancel;
axios.VERSION = VERSION;
axios.toFormData = toFormData_default;
axios.AxiosError = AxiosError_default;
axios.Cancel = axios.CanceledError;
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = spread;
axios.isAxiosError = isAxiosError;
axios.mergeConfig = mergeConfig;
axios.AxiosHeaders = AxiosHeaders_default;
axios.formToJSON = (thing) => formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);
axios.getAdapter = adapters_default.getAdapter;
axios.HttpStatusCode = HttpStatusCode_default;
axios.default = axios;
var axios_default = axios;

// node_modules/axios/index.js
var {
  Axios: Axios2,
  AxiosError: AxiosError2,
  CanceledError: CanceledError2,
  isCancel: isCancel2,
  CancelToken: CancelToken2,
  VERSION: VERSION2,
  all: all2,
  Cancel,
  isAxiosError: isAxiosError2,
  spread: spread2,
  toFormData: toFormData2,
  AxiosHeaders: AxiosHeaders2,
  HttpStatusCode: HttpStatusCode2,
  formToJSON,
  getAdapter,
  mergeConfig: mergeConfig2
} = axios_default;

// src/gitlab_api.ts
var urlslash = (...text) => {
  const path2 = text.join("/");
  const end = path2.slice(path2.lastIndexOf("/"));
  const start = path2.slice(0, path2.lastIndexOf("/")).replace(/\./gm, "%2E");
  return (start + end).replace(/\//gm, "%2F");
};
function base64ToArrayBuffer(base64) {
  var binaryString = atob(base64);
  var bytes = new Uint8Array(binaryString.length);
  for (var i = 0; i < binaryString.length; i++) {
    bytes[i] = binaryString.charCodeAt(i);
  }
  return bytes.buffer;
}
var exurl = (_url, _params_no = 0) => ({
  base: (url) => exurl(_url + url, _params_no),
  add: (key, value) => exurl(_url + (_params_no == 0 ? "?" : "&") + `${key}=${value}`, _params_no + 1),
  params: (key, value) => exurl(_url.replace(`:${key}`, value), _params_no),
  value: _url
});
var GitLabAPI = class {
  constructor() {
    this.id = () => urlslash(this.options.project, this.options.repository);
    this.header = () => {
      return {
        "PRIVATE-TOKEN": this.options.token,
        "Content-Type": "application/json"
      };
    };
    this.url = {
      commits: () => exurl(`${this.options.api}/projects/${this.id()}/repository/commits`),
      branches: () => exurl(`${this.options.api}/projects/${this.id()}/repository/branches`),
      files: () => exurl(`${this.options.api}/projects/${this.id()}/repository/files`)
    };
  }
  setoptions(options) {
    this.options = options;
  }
  async get_local_file_content(path2) {
    const array_buffer = await app.vault.adapter.readBinary(path2);
    return (0, import_obsidian.arrayBufferToBase64)(array_buffer);
  }
  async save_local_file(remote_path, local_path, create_if_not_exist = false) {
    if (!local_path)
      local_path = remote_path;
    const remote_file = await this.read(remote_path);
    if (!remote_file) {
      if (create_if_not_exist)
        this.create(remote_path);
    } else
      app.vault.adapter.writeBinary(local_path, base64ToArrayBuffer(remote_file.data.content));
  }
  async get_branches() {
    const url = this.url.branches().add("pt", "null");
    const res = [];
    try {
      await this.pagination(1, url, async (res_item) => {
        res.push(...res_item.data.map((item) => item.name));
      });
    } catch (e) {
      new import_obsidian.Notice(`Cannot get branches
${url.value}`);
    }
    return res;
  }
  async create_branch(branch, parent_branch) {
    const url = this.url.branches().add("branch", urlslash(branch)).add("ref", urlslash(parent_branch)).value;
    const res = [];
    try {
      await axios_default.post(url, null, {
        headers: this.header()
      });
    } catch (e) {
      new import_obsidian.Notice(`Error while creating branch
${url}`);
    }
    return res;
  }
  async save_last_commit() {
    const url = this.url.commits().add("with_stats", "true").add("all", "true").add("per_page", "3").value;
    const res = await axios_default.get(url, {
      headers: this.header()
    });
    const last_commit = res.data.pop();
    pocket.set("last_commit_id", last_commit.id);
    pocket.set("last_commit_date", last_commit.committed_date);
  }
  convertToGitlabCommit(data) {
    return {
      ...data,
      created_at: new Date(data.created_at),
      authored_date: new Date(data.authored_date),
      committed_date: new Date(data.committed_date)
    };
  }
  async get_commit(sha) {
    const url = this.url.commits().base("/" + sha);
    try {
      const res = await axios_default.get(url.value, {
        headers: this.header()
      });
      return this.convertToGitlabCommit(res.data);
    } catch (e) {
      new import_obsidian.Notice(`Cannot get commit
${url.value}`);
    }
    return null;
  }
  async get_commits() {
    const url = this.url.commits().add("with_stats", "true").add("all", "true").add("ref_name", this.options.branch).add("since", pocket.get("last_commit_date") || new Date().toISOString());
    const res = [];
    try {
      await this.pagination(1, url, (res_item) => {
        res.push(...res_item.data);
      });
    } catch (e) {
      new import_obsidian.Notice(`Cannot get commits
${url.value}`);
    }
    return res;
  }
  async get_all_commits() {
    const url = this.url.commits().add("with_stats", "true").add("ref_name", this.options.branch).add("all", "true");
    const res = [];
    try {
      await this.pagination(1, url, (res_item) => {
        res.push(...res_item.data);
      });
    } catch (e) {
      new import_obsidian.Notice(`Cannot get commits
${url.value}`);
    }
    return res;
  }
  async get_meta_data_file(path2) {
    const url = this.url.files().base(`/${urlslash(path2)}`).add("ref", this.options.branch);
    try {
      return await axios_default.head(url.value, {
        headers: this.header()
      });
    } catch (e) {
      new import_obsidian.Notice(`Cannot get file header
${url.value}`);
    }
    return null;
  }
  async pagination(start_page, url, callback, per_page = 100) {
    var _a;
    const page_url = url.add("per_page", per_page.toString()).add("page", start_page.toString());
    const res = await axios_default.get(page_url.value, { headers: this.header() });
    if (((_a = res.data) == null ? void 0 : _a.length) == 0)
      return;
    await callback(res);
    await this.pagination(start_page + 1, url, callback, per_page);
  }
  async blame(path2) {
    const url = this.url.files().base(`/${urlslash(path2)}/blame`).add("ref", this.options.branch).value;
    try {
      const res = await axios_default.get(url, {
        headers: this.header()
      });
      return res.data;
    } catch (e) {
    }
  }
  async get_diffs(commit_id) {
    const url = this.url.commits().base(`/${commit_id}/diff`).value;
    let res = null;
    try {
      res = await axios_default.get(url, { headers: this.header() });
    } catch (e) {
      new import_obsidian.Notice(`Cannot get diff from commit ${commit_id}`);
    }
    return res;
  }
  async create(path2, commit = {}, notifications = true, update_if_exist = true) {
    const file_content = await this.get_local_file_content(path2);
    const data = {
      branch: commit.branch || this.options.branch,
      encoding: commit.encoding || "base64",
      author_email: commit.author_email || this.options.email,
      author_name: commit.author_name || this.options.nick,
      commit_message: commit.commit_message || "created file",
      content: file_content
    };
    const file_url = `${this.options.api}/projects/${this.id()}/repository/files/${urlslash(path2)}?ref=${data.branch}`;
    let res = null;
    try {
      res = await axios_default.post(
        file_url,
        data,
        {
          headers: this.header()
        }
      );
      sync_logs.log(`creating file "${path2}"`);
    } catch (e) {
      sync_logs.log(`FAIL: creating file "${path2}"`);
      if (update_if_exist) {
        if (notifications && this.options.notifications)
          new import_obsidian.Notice("Cannot create file\nTrying update file");
      }
      try {
        await this.modify(path2, commit, notifications, false);
      } catch (e2) {
        if (this.options.notifications)
          new import_obsidian.Notice("Cannot update file");
      }
    }
    return res;
  }
  async modify(path2, commit = {}, notifications = true, create_if_not_exist = true) {
    const file_content = await this.get_local_file_content(path2);
    const data = {
      branch: commit.branch || this.options.branch,
      encoding: commit.encoding || "base64",
      author_email: commit.author_email || this.options.email,
      author_name: commit.author_name || this.options.nick,
      commit_message: commit.commit_message || "modified file",
      content: file_content
    };
    const file_url = `${this.options.api}/projects/${this.id()}/repository/files/${urlslash(path2)}?ref=${data.branch}`;
    let res = null;
    try {
      res = await axios_default.put(
        file_url,
        data,
        {
          headers: this.header()
        }
      );
      sync_logs.log(`modifying file "${path2}"`);
    } catch (e) {
      sync_logs.log(`FAIL: modifying file "${path2}"`);
      if (create_if_not_exist) {
        if (notifications && this.options.notifications)
          new import_obsidian.Notice("Cannot update file\nTrying create file");
      }
      try {
        await this.create(path2, commit, notifications, false);
      } catch (e2) {
        if (this.options.notifications)
          new import_obsidian.Notice("Cannot create file");
      }
    }
    return res;
  }
  async delete(path2, commit = {}, notifications = true) {
    const data = {
      branch: commit.branch || this.options.branch,
      author_email: commit.author_email || this.options.email,
      author_name: commit.author_name || this.options.nick,
      commit_message: commit.commit_message || "deleted file"
    };
    const file_url = `${this.options.api}/projects/${this.id()}/repository/files/${urlslash(path2)}?ref=${data.branch}`;
    let res = null;
    try {
      res = await axios_default({
        method: "DELETE",
        url: file_url,
        data,
        headers: this.header()
      });
      sync_logs.log(`deleting file "${path2}"`);
    } catch (e) {
      sync_logs.log(`FAIL: deleting file "${path2}"`);
      if (notifications && this.options.notifications)
        new import_obsidian.Notice("Cannot delete file");
    }
    return res;
  }
  async rename(path2, old_path, commit = {}, notifications = true) {
    try {
      await this.create(path2, commit, notifications);
      await this.delete(old_path, commit, notifications);
      sync_logs.log(`renaming file "${old_path}" -> "${path2}"`);
    } catch (e) {
      sync_logs.log(`FAIL: renaming file "${old_path}" -> "${path2}"`);
    }
  }
  async read(path2, branch = this.options.branch) {
    const file_url = `${this.options.api}/projects/${this.id()}/repository/files/${urlslash(path2)}?ref=${branch}`;
    let res = null;
    try {
      res = await axios_default.get(
        file_url,
        {
          headers: this.header()
        }
      );
      sync_logs.log(`reading file "${path2}"`);
    } catch (e) {
      sync_logs.log(`FAIL: reading file "${path2}"`);
      if (this.options.notifications)
        new import_obsidian.Notice("Cannot read file");
    }
    return res;
  }
  async read_repo_tree(path2 = "", depth = 0, depth_limit = -1, notifications = true) {
    const url = exurl(`${this.options.api}/projects/${this.id()}/repository/tree`).add("path", urlslash(path2)).add("ref", this.options.branch).add("recursive", "true");
    const tree = [];
    const pages = [];
    await this.pagination(1, url, (res) => {
      pages.push(...res.data);
    });
    for (const item of pages) {
      tree.push([item.id, item.path, item.type == "tree"]);
      if (this.options.notifications && notifications && item.type == "tree")
        new import_obsidian.Notice(`Fetching: "${item.path}"`);
    }
    return tree;
  }
  snippet(title, description = "", visibility = "private") {
    const snippet = new GitLabAPISnippet(this);
    snippet.metadata({ title, description, visibility });
    return snippet;
  }
};
var GitLabAPISnippet = class extends GitLabAPI {
  constructor(gitlab2) {
    super();
    this.sync = false;
    this.files = [];
    this.setoptions(gitlab2.options);
  }
  body() {
    return {
      title: this.title,
      description: this.description,
      visibility: this.visibility,
      files: []
    };
  }
  metadata(snippet) {
    this.title = snippet.title;
    this.description = snippet.description;
    this.visibility = snippet.visibility;
  }
  async add_files(...files) {
    for (const file of files) {
      file.action = file.action || "create";
      this.files.push(file);
    }
    if (this.sync) {
      if (this.snippet_id)
        await this.update_snippet({ files });
      else
        await this.create_snippet({ files });
    }
  }
  async update_files(...files) {
    for (const file of files) {
      file.action = file.action || "update";
      if (!!file.previous_path)
        file.action = "move";
      for (let index in this.files) {
        const item = this.files[index];
        if (file.file_path == item.file_path || file.previous_path == item.file_path)
          this.files[index] = file;
      }
    }
    if (this.sync)
      await this.update_snippet({ files });
  }
  async remove_files(...files) {
    for (const file of files) {
      file.action = "delete";
      if (!file.file_path)
        continue;
      file.content = "";
      file.previous_path = "";
      for (let index = 0; index < this.files.length; index++) {
        const item = this.files[index];
        if (file.file_path == item.file_path || file.previous_path == item.file_path)
          this.files.splice(index, 1);
      }
    }
    if (this.sync)
      await this.update_snippet({ files });
  }
  async from_id(id) {
    const snippet = await axios_default.get(
      `${this.options.api}/projects/${this.id()}/snippets/${id}`,
      { headers: this.header() }
    );
    console.log(snippet);
    if (snippet && snippet.data) {
      this.snippet_id = id;
      this.title = snippet.data.title;
    }
    return snippet.data;
  }
  async create_snippet(body = {}) {
    const create = await axios_default.post(
      `${this.options.api}/projects/${this.id()}/snippets`,
      { ...this.body(), ...body },
      { headers: this.header() }
    );
    this.snippet_id = create.data.id;
  }
  async update_snippet(body = {}) {
    if (!this.snippet_id)
      return;
    await axios_default.put(
      `${this.options.api}/projects/${this.id()}/snippets/${this.snippet_id}`,
      { ...this.body(), ...body },
      { headers: this.header() }
    );
  }
  async delete_snippet() {
    if (!this.snippet_id)
      return;
    return await axios_default.delete(
      `${this.options.api}/projects/${this.id()}/snippets/${this.snippet_id}`,
      { headers: this.header() }
    );
  }
  async get_file(path2) {
    if (!this.snippet_id)
      return;
    const res = await axios_default.get(
      `${this.options.api}/projects/${this.id()}/snippets/${this.snippet_id}/files/main/${urlslash(path2)}/raw`,
      { headers: this.header() }
    );
    const content = res.data;
    for (let file of this.files) {
      if (file.file_path == path2 || file.previous_path == path2)
        file.content = content;
    }
    return content;
  }
  async get_snippet() {
    if (!this.snippet_id)
      return;
    return await axios_default.get(
      `${this.options.api}/projects/${this.id()}/snippets/${this.snippet_id}/raw`,
      { headers: this.header() }
    );
  }
};

// src/storage.ts
var path = __toESM(require("path"));

// src/static.ts
var DEFAULT_SETTINGS = {
  token: "*****",
  username: "",
  repo_name: "",
  project_name: "",
  email: "",
  auto: false,
  fetch: false,
  branch: "master",
  notif: true
};
var LOGGER_FILE = "logger.log";
var HISTORY_FILE = "history.log";
var POCKET_TOKEN_KEY = "gitlabtoken";
var HISTORY_VIEW = "history";
var GITLAB_API_URL = "https://gitlab.com/api/v4";
var PLUGIN_NAME = "obsidian-snowflake";

// src/storage.ts
var Pocket = class {
  constructor(settings) {
    this.prefix = "snowflake_obsidian";
    this.prefix = (settings == null ? void 0 : settings.prefix) || this.prefix;
  }
  get(key) {
    return localStorage.getItem(this.prefix + key);
  }
  set(key, value) {
    localStorage.setItem(this.prefix + key, `${value}`);
  }
  clear(key) {
    localStorage.removeItem(this.prefix + key);
  }
  clear_all() {
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key == null ? void 0 : key.startsWith(this.prefix))
        localStorage.removeItem(key);
    }
  }
};
var FileMetaData = class {
  constructor(filename, config_dir = ".obsidian") {
    this.path = "";
    this.config_dir = ".obsidian";
    this.ext_path = () => `${this.config_dir}/plugins/${PLUGIN_NAME}`;
    this.lines_limit = 500;
    this.current_lines_pointer = 0;
    this.filename = filename;
    this.config_dir = config_dir;
    if (typeof process === "object")
      this.path = path.join(this.ext_path(), this.filename);
    else
      this.path = [this.ext_path(), this.filename].join("/");
  }
  set_main_path() {
    if (typeof process === "object")
      this.path = path.join(this.ext_path(), this.filename);
    else
      this.path = [this.ext_path(), this.filename].join("/");
  }
  set_limit(limit) {
    this.lines_limit = limit;
  }
  set_callback(callback) {
    this.callback = callback;
  }
  set_config_dir(config_dir) {
    this.config_dir = config_dir;
  }
  create() {
    try {
      app.vault.adapter.write(this.path, "");
    } catch (e) {
      console.log("Error: Write File");
    }
  }
  async set(value) {
    try {
      await app.vault.adapter.write(this.path, value);
    } catch (e) {
      console.log("Error: Write File Sync");
    }
  }
  async add(value) {
    try {
      await app.vault.adapter.append(this.path, value);
    } catch (e) {
      console.log("Error: Append File Sync");
    }
  }
  async get() {
    try {
      return await app.vault.adapter.read(this.path);
    } catch (err) {
      console.log("Error: Read File Sync - " + err.message);
      return "";
    }
  }
  /**
     *  returns `count` of lines from `start` value.
     * `start` could be also less then `0`, then `count` will be get by the end of the file
     * 
     * @param start 
     * @param count 
     * @returns 
  */
  async get_lines_by_index(start, count) {
    const file = await this.get();
    const lines = file.toString().split("\n");
    const len = lines.length;
    if (start > len)
      return [];
    if (!count)
      count = len;
    if (start < 0)
      start = len + start;
    if (start < 0)
      start = 0;
    if (start + count >= len)
      count = len;
    else
      count = start + count;
    this.current_lines_pointer = len;
    return lines.slice(start, count).filter((item) => !!item);
  }
  async get_lines_from_to_phrase(phrase, count = 1, contain_phrase = false, reverse = true) {
    const file = await this.get();
    const lines = file.toString().split("\n").reverse();
    const len = lines.length;
    const lines_to_return = [];
    for (let line of lines) {
      if (line.contains(phrase)) {
        if (contain_phrase)
          lines_to_return.push(line);
        count--;
      } else {
        lines_to_return.push(line);
      }
      if (count == 0)
        break;
    }
    this.current_lines_pointer = len;
    return lines_to_return.filter((item) => !!item);
  }
};
var Logger = class extends FileMetaData {
  constructor(filename, config_dir = ".obsidian") {
    super(filename, config_dir);
  }
  async check_limit() {
    if (this.current_lines_pointer > 0.9 * this.lines_limit) {
      const start = 0.1 * this.lines_limit;
      await this.set((await this.get_lines_by_index(-start)).join("\n"));
      this.current_lines_pointer = start;
    }
  }
  async log(message) {
    const date = new Date();
    const fullmessage = `
[${date.toLocaleString().replace(", ", "|")}]>	${message}`;
    await this.add(fullmessage);
    if (this.callback)
      this.callback(fullmessage);
    this.current_lines_pointer++;
    await this.check_limit();
  }
};
var History = class extends FileMetaData {
  constructor(filename, config_dir = ".obsidian") {
    super(filename, config_dir);
    this.lines_limit = 2e3;
    this.current_lines_pointer = 0;
  }
  async check_limit() {
    if (this.current_lines_pointer > 0.9 * this.lines_limit) {
      const start = 0.3 * this.lines_limit;
      await this.set((await this.get_lines_by_index(-start)).join("\n"));
      this.current_lines_pointer = start;
    }
  }
  parser(line) {
    const [time, action, path2, old_path] = line.split("	");
    return {
      time,
      action,
      path: path2,
      old_path
    };
  }
  async clear() {
    await this.set("");
    this.current_lines_pointer = 0;
  }
  async check_repeats(_action, _path) {
    const last_changes = await this.get_lines_by_index(-200);
    for (const item of last_changes) {
      const { action, path: path2 } = this.parser(item);
      if (action == "MODIFY" && _action == action && path2 == _path)
        return false;
    }
    return true;
  }
  async add_action(action, path2, old_path) {
    const date = new Date();
    if (!await this.check_repeats(action, path2))
      return;
    const fullmessage = `
[${date.toLocaleString()}]	${action}	${path2}	${old_path || "null"}`;
    await this.add(fullmessage);
    if (this.callback)
      this.callback(fullmessage);
    this.current_lines_pointer++;
    await this.check_limit();
  }
};

// src/async_queue.ts
var Queue = class {
  constructor() {
    this.actions = [];
  }
  append(action) {
    this.actions.push(action);
    if (this.actions.length == 1)
      this.action_handle();
  }
  async action_handle() {
    if (this.actions.length != 0) {
      const action = this.actions[0];
      if (action)
        await action();
      this.actions.shift();
      this.action_handle();
    }
  }
};

// src/settings.ts
var import_obsidian2 = require("obsidian");
var SnowflakeSettings = class extends import_obsidian2.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    const set = () => new import_obsidian2.Setting(containerEl);
    set().setName("Token").setDesc("Here is gitlab token").addText((text) => {
      var _a;
      return text.setPlaceholder("Enter your secret").setValue("*".repeat(((_a = pocket.get("gitlabtoken")) == null ? void 0 : _a.length) || 0)).onChange(async (value) => {
        pocket.set("gitlabtoken", value);
        await this.plugin.saveSettings();
      });
    });
    set().setName("Email").setDesc("Here is email - git commit").addText((text) => text.setPlaceholder("Enter your email").setValue(this.plugin.settings.email).onChange(async (value) => {
      this.plugin.settings.email = value;
      await this.plugin.saveSettings();
    }));
    set().setName("Username").setDesc("Here is gitlab username - git commit").addText((text) => text.setPlaceholder("Enter your username").setValue(this.plugin.settings.username).onChange(async (value) => {
      this.plugin.settings.username = value;
      await this.plugin.saveSettings();
    }));
    set().setName("Project").setDesc("Here is gitlab project name").addText((text) => text.setPlaceholder("Enter project name").setValue(this.plugin.settings.project_name).onChange(async (value) => {
      this.plugin.settings.project_name = value;
      await this.plugin.saveSettings();
    }));
    set().setName("Name").setDesc("Here is gitlab repository name").addText((text) => text.setPlaceholder("Enter repository name").setValue(this.plugin.settings.repo_name).onChange(async (value) => {
      this.plugin.settings.repo_name = value;
      await this.plugin.saveSettings();
    }));
    set().setName("Main branch").setDesc("Here is gitlab main branch name").addText((text) => text.setPlaceholder("Enter your branch name").setValue(this.plugin.settings.branch).onChange(async (value) => {
      this.plugin.settings.branch = value;
      await this.plugin.saveSettings();
    }));
    set().setName("Sync Auto").setDesc("Set on if you want to sync repository automatically").addToggle((cb) => cb.setValue(this.plugin.settings.auto).onChange(async (value) => {
      this.plugin.settings.auto = value;
      await this.plugin.saveSettings();
      new import_obsidian2.Notice(`Auto Mode: ${value ? "on" : "off"}`);
    }));
    set().setName("Fetch on start").setDesc("Set on if you want to sync repository on start").addToggle((cb) => cb.setValue(this.plugin.settings.fetch).onChange(async (value) => {
      this.plugin.settings.fetch = value;
      await this.plugin.saveSettings();
      new import_obsidian2.Notice(`Auto Fetch: ${value ? "on" : "off"}`);
    }));
    set().setName("Notifications").setDesc("Set on if you want notifications").addToggle((cb) => cb.setValue(this.plugin.settings.notif).onChange(async (value) => {
      this.plugin.settings.notif = value;
      await this.plugin.saveSettings();
      new import_obsidian2.Notice(`Notifications: ${value ? "on" : "off"}`);
    }));
    set().setName("Reload Settings").setDesc("Click to reload current settings").addButton((cb) => cb.setButtonText("Reload").setIcon("refresh-cw").onClick(() => {
      this.plugin.loadSettings();
      new import_obsidian2.Notice("Settings updated");
    }));
  }
};

// views/history_view.ts
var import_obsidian3 = require("obsidian");
var HistoryLeaf = class extends import_obsidian3.ItemView {
  constructor(leaf) {
    super(leaf);
    this.icon = "scroll";
  }
  getViewType() {
    return HISTORY_VIEW;
  }
  getDisplayText() {
    return "Snowflake History";
  }
  async reload_logs(element, type) {
    const logs = await type.get_lines_by_index(-300);
    element.empty();
    logs.reverse().forEach((item) => {
      element.createEl("code", {
        text: item.replace(/\t/gm, " | ")
      });
    });
  }
  create_button(parent, name, callback) {
    const button = parent.createEl("button", {
      text: name
    });
    button.style.margin = "10px";
    button.addEventListener("click", () => {
      callback();
    });
  }
  async render() {
    const container = this.containerEl.children[1];
    container.empty();
    container.createEl("h2", { text: "Snowflake History" });
    container.createEl("h3", { text: "Snowflake Local Changes" });
    this.local_logs = container.createEl("div");
    container.createEl("h3", { text: "Snowflake Sync Logs" });
    this.sync_logs = container.createEl("div");
    [this.local_logs, this.sync_logs].forEach((item) => {
      item.style.fontSize = "10px";
      item.style.whiteSpace = "nowrap";
      item.style.maxHeight = "500px";
      item.style.overflowY = "auto";
      item.style.display = "flex";
      item.style.flexDirection = "column-reverse";
    });
  }
  async update() {
    await this.reload_logs(this.local_logs, local_changes_logs);
    await this.reload_logs(this.sync_logs, sync_logs);
  }
  async onOpen() {
    await this.render();
    await this.reload_logs(this.local_logs, local_changes_logs);
    await this.reload_logs(this.sync_logs, sync_logs);
  }
};

// views/views.ts
var activate_history_view = async () => {
  const { workspace } = app;
  let leaf = null;
  const leaves = workspace.getLeavesOfType(HISTORY_VIEW);
  if (leaves.length > 0) {
    leaf = leaves[0];
  } else {
    leaf = workspace.getRightLeaf(false);
    await leaf.setViewState({ type: HISTORY_VIEW, active: false });
  }
  sync_logs.set_callback(() => {
    if (leaf)
      leaf.view.update();
  });
  local_changes_logs.set_callback(() => {
    if (leaf)
      leaf.view.update();
  });
};

// src/commands/show_panels.ts
var logs_panel = {
  id: "open_logs_panel",
  name: "Open Snowflake Logs",
  callback: async () => {
    activate_history_view();
  }
};

// src/modal/selection.ts
var import_obsidian4 = require("obsidian");
var CommandSelection = class extends import_obsidian4.SuggestModal {
  constructor(config) {
    super(app);
    this.config = { ...config };
    this.setPlaceholder(this.config.placeholder || "");
  }
  open() {
    super.open();
    if (this.config.initialValue != void 0) {
      this.inputEl.value = this.config.initialValue;
      this.inputEl.dispatchEvent(new Event("input"));
    }
    return new Promise((resolve) => {
      this.resolve = resolve;
    });
  }
  selectSuggestion(value, evt) {
    if (this.resolve) {
      let res;
      if (this.config.allowEmpty && value === " ")
        res = "";
      else if (value === "...")
        res = void 0;
      else
        res = value;
      this.resolve(res);
    }
    super.selectSuggestion(value, evt);
  }
  onClose() {
    if (this.resolve)
      this.resolve(void 0);
  }
  getSuggestions(query) {
    if (this.config.onlySelection) {
      return this.config.options || [];
    } else if (this.config.allowEmpty) {
      return [query.length > 0 ? query : " ", ...this.config.options || []];
    } else {
      return [query.length > 0 ? query : "...", ...this.config.options || []];
    }
  }
  renderSuggestion(value, el) {
    el.setText(value);
  }
  onChooseSuggestion(item, evt) {
  }
};

// src/commands/repository_controller.ts
var import_obsidian5 = require("obsidian");

// src/utils.ts
var base64ToArrayBuffer2 = (base64) => {
  var binaryString = atob(base64);
  var bytes = new Uint8Array(binaryString.length);
  for (var i = 0; i < binaryString.length; i++) {
    bytes[i] = binaryString.charCodeAt(i);
  }
  return bytes.buffer;
};

// src/commands/repository_controller.ts
var command__send_all = async () => {
  const nc = new import_obsidian5.Notice("Sending...", 0);
  const status = [0, 0];
  const read_folder = async (dir) => {
    if (dir.contains(".git") || dir.contains("node_modules"))
      return;
    const content = await app.vault.adapter.list(dir);
    for (const path2 of content.files) {
      nc.setMessage(path2);
      status[0] += 1;
      await gitlab.create(path2, {}, false);
    }
    for (const path2 of content.folders) {
      nc.setMessage(path2);
      status[1] += 1;
      await read_folder(path2);
    }
  };
  await read_folder("/");
  await gitlab.save_last_commit();
  nc.setMessage(`Done for ${status[0]} files in ${status[1]} folders`);
  setTimeout(() => nc.hide(), 1e3 * 5);
};
var command__send_changes = async () => {
  const logged_local_changes_from_file = await local_changes_logs.get_lines_from_to_phrase("LOCAL CHANGES");
  const files_states = /* @__PURE__ */ new Map();
  let logged_local_changes_parsed = [];
  logged_local_changes_from_file.reverse().forEach(
    (item) => {
      const parsed_object = local_changes_logs.parser(item);
      if (!!parsed_object.old_path)
        files_states.delete(parsed_object.old_path);
      if (files_states.has(parsed_object.path) && parsed_object.action == "DELETE")
        files_states.delete(parsed_object.path);
      if (files_states.has(parsed_object.path) && parsed_object.action == "MODIFY") {
        files_states.set(parsed_object.path, { ...parsed_object, action: "CREATE" });
        return;
      }
      files_states.set(parsed_object.path, parsed_object);
      logged_local_changes_parsed = Array.from(files_states.entries());
    }
  );
  logged_local_changes_parsed.forEach((item) => {
    const parsed = item[1];
    if (parsed.action == "CREATE")
      req_queue.append(async () => {
        try {
          await gitlab.create(
            parsed.path,
            { commit_message: `creating file "${parsed.path}" - ${parsed.time}` },
            false
          );
          sync_logs.log(`creating file "${parsed.path}"`);
        } catch (e) {
          sync_logs.log(`FAIL: creating file "${parsed.path}"`);
        }
      });
    if (parsed.action == "MODIFY")
      req_queue.append(async () => {
        try {
          await gitlab.modify(
            parsed.path,
            { commit_message: `modifying file "${parsed.path}" - ${parsed.time}` },
            false
          );
          sync_logs.log(`modifying file "${parsed.path}"`);
        } catch (e) {
          sync_logs.log(`FAIL: modifying file "${parsed.path}"`);
        }
      });
    if (parsed.action == "DELETE")
      req_queue.append(async () => {
        try {
          await gitlab.delete(
            parsed.path,
            { commit_message: `deleting file "${parsed.path}" - ${parsed.time}` },
            false
          );
          sync_logs.log(`deleting file "${parsed.path}"`);
        } catch (e) {
          sync_logs.log(`FAIL: deleting file "${parsed.path}"`);
        }
      });
    if (parsed.action == "RENAME")
      req_queue.append(async () => {
        try {
          await gitlab.create(
            parsed.path,
            { commit_message: `renaming[c] file "${parsed.old_path}" -> "${parsed.path}" - ${parsed.time}` },
            false
          );
          await gitlab.delete(
            parsed.old_path,
            { commit_message: `renaming[d] file "${parsed.old_path}" -> "${parsed.path}" - ${parsed.time}` },
            false
          );
          sync_logs.log(`renaming file "${parsed.old_path}" -> "${parsed.path}"`);
        } catch (e) {
          sync_logs.log(`FAIL: renaming file "${parsed.old_path}" -> "${parsed.path}"`);
        }
      });
  });
  await gitlab.save_last_commit();
  local_changes_logs.add_action("LOCAL CHANGES PUSHED", `${logged_local_changes_parsed.length} changes`);
  local_changes_logs.callback();
};
var command__get_all_repo = async () => {
  const include_config = await new CommandSelection({
    placeholder: "Includes .obsidian?",
    options: ["YES", "NO"]
  }).open();
  const choose_pathtree = async (start_path = "") => {
    const tree2 = await gitlab.read_repo_tree(start_path, 0, 0, false);
    const folders = tree2.filter((item) => item[2]).map((item) => item[1]);
    if (folders.length == 0)
      return start_path;
    const repo_path = await new CommandSelection({
      placeholder: "Repo dir path - leave empty for whole repo or .. to back",
      options: folders
    }).open();
    if (!repo_path)
      return start_path;
    if (repo_path == "..")
      return choose_pathtree("");
    return choose_pathtree(repo_path);
  };
  const path2 = await choose_pathtree("");
  const tree = await gitlab.read_repo_tree(path2);
  tree.forEach((item) => {
    if (item[2])
      app.vault.adapter.mkdir(item[1]);
  });
  const file_status = new import_obsidian5.Notice("File: ", 0);
  for (const file of tree) {
    if (include_config == "YES" && file[1].startsWith(".obsidian"))
      continue;
    if (file[2])
      continue;
    const res = await gitlab.read(file[1]);
    if (res == null)
      continue;
    file_status.setMessage("File: " + file[1]);
    app.vault.adapter.writeBinary(file[1], base64ToArrayBuffer2(res.data.content));
  }
  await gitlab.save_last_commit();
  file_status.hide();
  new import_obsidian5.Notice("Done");
};
var command__fetch_changes = async () => {
  const nc = new import_obsidian5.Notice("Fetching...", 0);
  const res = await gitlab.get_commits();
  const last_commit = res[res.length - 1];
  if (!last_commit)
    return await gitlab.save_last_commit();
  if (last_commit.id == pocket.get("last_commit_id"))
    return nc.setMessage("Everything is up to date");
  let content_remote_changes = 0;
  res.forEach((commit) => {
    req_queue.append(async () => {
      const res2 = await gitlab.get_diffs(commit.id);
      res2 == null ? void 0 : res2.data.forEach(async (item) => {
        content_remote_changes++;
        req_queue.append(async () => {
          try {
            if (item.new_file || !item.renamed_file && !item.new_file && !item.deleted_file)
              await gitlab.save_local_file(item.new_path);
            if (item.renamed_file)
              await app.vault.adapter.rename(item.old_path, item.new_path);
            if (item.deleted_file)
              await app.vault.adapter.remove(item.new_path);
          } catch (e) {
            console.log("fetching errors");
          }
        });
      });
    });
  });
  await gitlab.save_last_commit();
  req_queue.append(() => local_changes_logs.add_action("LOCAL CHANGES PULLED", `${content_remote_changes} changes`));
  nc.setMessage("Everything is up to date\nLast commit: " + pocket.get("last_commit_id"));
};
var get_all_repository = {
  id: "get_all_repository",
  name: "Download all repository",
  callback: async () => {
    command__get_all_repo();
  }
};
var fetch_changes = {
  id: "fetch_changes",
  name: "Fetch remote changes",
  callback: async () => {
    command__fetch_changes();
  }
};
var send_all_gitlab = {
  id: "send_all_gitlab",
  name: "Send all local files",
  callback: async () => {
    command__send_all();
  }
};
var send_changes_gitlab = {
  id: "send_changes_gitlab",
  name: "Send local changes",
  callback: async () => {
    command__send_changes();
  }
};

// src/commands/barrel.ts
var commands = [
  logs_panel,
  get_all_repository,
  send_all_gitlab,
  send_changes_gitlab,
  fetch_changes
];
var barrel_default = commands;

// src/context_menu/file-menu.ts
var import_obsidian6 = require("obsidian");
var file_menu_send_file = (menu, file) => {
  menu.addItem((item) => {
    item.setTitle("Gitlab: Send File").setIcon("send").onClick(async () => {
      const nc = new import_obsidian6.Notice("Sending...", 0);
      req_queue.append(async () => {
        if (file.children) {
          const read_folder = async (dir) => {
            const content = await app.vault.adapter.list(dir);
            for (const path2 of content.files) {
              nc.setMessage(path2);
              await gitlab.create(path2);
            }
            for (const path2 of content.folders) {
              nc.setMessage(path2);
              await read_folder(path2);
            }
          };
          await read_folder(file.path);
        } else {
          await gitlab.create(file.path);
        }
        nc.setMessage("Done");
      });
      setTimeout(() => nc.hide(), 1e3 * 5);
    });
  });
};
var file_menu_load_file = (menu, file) => {
  menu.addItem((item) => {
    item.setTitle("Gitlab: Load File").setIcon("file-down").onClick(async () => {
      const nc = new import_obsidian6.Notice("Loading...", 0);
      req_queue.append(async () => {
        if (file.children) {
          const tree = await gitlab.read_repo_tree(file.path);
          tree.forEach((item2) => {
            if (item2[2])
              app.vault.adapter.mkdir(item2[1]);
          });
          for (const file2 of tree) {
            if (file2[2])
              continue;
            const res = await gitlab.read(file2[1]);
            if (res == null)
              continue;
            app.vault.adapter.writeBinary(file2[1], base64ToArrayBuffer2(res.data.content));
          }
        } else {
          const res = await gitlab.read(file.path);
          if (res == null)
            return;
          app.vault.adapter.writeBinary(file.path, base64ToArrayBuffer2(res.data.content));
        }
        nc.setMessage("Done");
      });
      setTimeout(() => nc.hide(), 1e3 * 7);
    });
  });
};
var file_menu_delete_file = (menu, file) => {
  menu.addItem((item) => {
    item.setTitle("Gitlab: Delete File").setIcon("trash-2").onClick(async () => {
      const nc = new import_obsidian6.Notice("Deleting...", 0);
      req_queue.append(async () => {
        if (file.children) {
          const read_folder = async (dir) => {
            const content = await app.vault.adapter.list(dir);
            for (const path2 of content.files) {
              nc.setMessage(path2);
              await gitlab.delete(path2);
            }
            for (const path2 of content.folders) {
              nc.setMessage(path2);
              await read_folder(path2);
            }
          };
          await read_folder(file.path);
        } else {
          await gitlab.delete(file.path);
        }
        nc.setMessage("Done");
      });
      setTimeout(() => nc.hide(), 1e3 * 5);
    });
  });
};

// main.ts
var gitlab = new GitLabAPI();
var pocket = new Pocket();
var req_queue = new Queue();
var sync_logs = new Logger(LOGGER_FILE);
var local_changes_logs = new History(HISTORY_FILE);
var SyncSnowflake2 = class extends import_obsidian7.Plugin {
  constructor() {
    super(...arguments);
    this.gitlab_settings = () => {
      return {
        api: GITLAB_API_URL,
        token: pocket.get(POCKET_TOKEN_KEY) || "",
        project: this.settings.project_name,
        repository: this.settings.repo_name,
        email: this.settings.email,
        nick: this.settings.username,
        branch: this.settings.branch,
        notifications: this.settings.notif
      };
    };
  }
  async onload() {
    sync_logs.set_config_dir(this.app.vault.configDir);
    local_changes_logs.set_config_dir(this.app.vault.configDir);
    await this.loadSettings();
    const status_bar = this.addStatusBarItem();
    this.registerView(
      HISTORY_VIEW,
      (leaf) => new HistoryLeaf(leaf)
    );
    for (const command of barrel_default) {
      this.addCommand(command);
    }
    this.addRibbonIcon("send", "Send local changes", async (evt) => {
      command__send_changes();
    }).addClass("my-plugin-ribbon-class");
    this.addRibbonIcon("download-cloud", "Fetch", async (evt) => {
      command__fetch_changes();
    }).addClass("my-plugin-ribbon-class");
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        file_menu_send_file(menu, file);
        file_menu_load_file(menu, file);
        file_menu_delete_file(menu, file);
      })
    );
    this.registerEvent(
      this.app.workspace.on("file-open", async (file) => {
        if (!this.settings.auto)
          return;
        if (!(file == null ? void 0 : file.path))
          return;
        req_queue.append(async () => {
          status_bar.setText("Syncing...");
          await gitlab.save_local_file(file.path, file.path, true);
          status_bar.setText("Sync done");
        });
      })
    );
    setTimeout(() => {
      this.registerEvent(
        this.app.vault.on("create", async (file) => {
          local_changes_logs.add_action("CREATE", file.path);
          if (this.settings.auto)
            req_queue.append(async () => await gitlab.create(file.path));
        })
      );
      this.registerEvent(
        this.app.vault.on("modify", async (file) => {
          local_changes_logs.add_action("MODIFY", file.path);
          if (this.settings.auto)
            req_queue.append(async () => await gitlab.modify(file.path));
        })
      );
      this.registerEvent(
        this.app.vault.on("delete", async (file) => {
          local_changes_logs.add_action("DELETE", file.path);
          if (this.settings.auto)
            req_queue.append(async () => await gitlab.delete(file.path));
        })
      );
      this.registerEvent(
        this.app.vault.on("rename", async (file, old_path) => {
          local_changes_logs.add_action("RENAME", file.path, old_path);
          this.app.vault.adapter.files[file.name].rtime = Date.now();
          this.app.vault.adapter.files[file.name].old_path = old_path;
          if (this.settings.auto)
            req_queue.append(async () => {
              await gitlab.create(file.path);
              await gitlab.delete(old_path);
            });
        })
      );
    }, 1e3 * 3);
    setTimeout(() => {
      activate_history_view();
    }, 1e3);
    this.addSettingTab(new SnowflakeSettings(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    pocket.prefix = `snowflake_obsidian_${this.settings.project_name + this.settings.repo_name}`;
    const git_lab_options = this.gitlab_settings();
    gitlab.setoptions(git_lab_options);
  }
  async saveSettings() {
    await this.saveData(this.settings);
    pocket.prefix = `snowflake_obsidian_${this.settings.project_name + this.settings.repo_name}`;
    const git_lab_options = this.gitlab_settings();
    gitlab.setoptions(git_lab_options);
  }
};
//# sourceMappingURL=data:application/json;base64,
